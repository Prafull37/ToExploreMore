<mxfile host="app.diagrams.net" modified="2023-08-24T05:28:30.954Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0" etag="PAaeqBKNUpHOlIf_82JN" version="21.6.9" type="github">
  <diagram name="Page-1" id="HbvvoTfGpXGLiYqRiGCu">
    <mxGraphModel dx="1167" dy="-480" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="X4KiyQoHenp1-eZTwMw4-1" value="Frontend architectures can vary based on the complexity of the application, the technologies used, and the specific needs of the project. Here is a comprehensive list of frontend architectures:&lt;br&gt;&lt;br&gt;1. **Monolithic Architecture:**&lt;br&gt;&amp;nbsp;&amp;nbsp; - A single codebase handles all aspects of the frontend.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Easier to develop and deploy but can become unwieldy as the application grows.&lt;br&gt;&lt;br&gt;2. **Micro Frontends:**&lt;br&gt;&amp;nbsp;&amp;nbsp; - Divides the frontend into multiple smaller, loosely coupled applications.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Each micro frontend can be developed, deployed, and maintained independently.&lt;br&gt;&lt;br&gt;3. **Single Page Application (SPA):**&lt;br&gt;&amp;nbsp;&amp;nbsp; - Loads a single HTML page and dynamically updates content as the user interacts.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Typically uses JavaScript frameworks like React, Angular, or Vue.js.&lt;br&gt;&lt;br&gt;4. **Multi Page Application (MPA):**&lt;br&gt;&amp;nbsp;&amp;nbsp; - Each link or action results in a full page reload from the server.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Can be simpler to build but might result in slower user experience.&lt;br&gt;&lt;br&gt;5. **Progressive Web App (PWA):**&lt;br&gt;&amp;nbsp;&amp;nbsp; - Uses modern web technologies to provide an app-like experience within a browser.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Can work offline and be installed on a user&#39;s home screen.&lt;br&gt;&lt;br&gt;6. **Server-Side Rendered (SSR) Application:**&lt;br&gt;&amp;nbsp;&amp;nbsp; - Renders some or all of the UI on the server before sending it to the client.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Improves initial load times and SEO, but can be more complex to set up.&lt;br&gt;&lt;br&gt;7. **Client-Side Rendered (CSR) Application:**&lt;br&gt;&amp;nbsp;&amp;nbsp; - Renders the UI in the browser using JavaScript after initial page load.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Provides more interactivity but might lead to slower initial load times.&lt;br&gt;&lt;br&gt;8. **Isomorphic/Universal Application:**&lt;br&gt;&amp;nbsp;&amp;nbsp; - Mixes both server-side rendering and client-side rendering.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Initial content is rendered on the server for speed and SEO, then interactive parts are handled on the client.&lt;br&gt;&lt;br&gt;9. **Component-Based Architecture:**&lt;br&gt;&amp;nbsp;&amp;nbsp; - Divides the UI into reusable, self-contained components.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Popularized by libraries like React and Vue.js.&lt;br&gt;&lt;br&gt;10. **Model-View-Controller (MVC):**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Separates the application into three components: Model (data), View (UI), and Controller (user input).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Older architecture often used with traditional web applications.&lt;br&gt;&lt;br&gt;11. **Model-View-ViewModel (MVVM):**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Separates the UI into Model (data), View (UI), and ViewModel (manages state and logic).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Commonly used with frameworks like Angular.&lt;br&gt;&lt;br&gt;12. **Flux Architecture:**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Data flows in one direction, making it easier to manage state in large applications.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Popularized by Facebook for use with React.&lt;br&gt;&lt;br&gt;13. **Redux Architecture:**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - A predictable state container for JavaScript apps.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Centralizes state management and enables time-travel debugging.&lt;br&gt;&lt;br&gt;14. **MobX Architecture:**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - State management library that allows reactive data updates.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Provides a simpler alternative to Redux for state management.&lt;br&gt;&lt;br&gt;15. **Clean Architecture:**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Separates application layers into entities, use cases, and interfaces.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Aims to create a maintainable and scalable architecture.&lt;br&gt;&lt;br&gt;16. **Domain-Driven Design (DDD):**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Focuses on structuring software around the business domain.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Encourages close collaboration between technical and domain experts.&lt;br&gt;&lt;br&gt;17. **Component-Driven Development (CDD):**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Emphasizes building UIs as a collection of components.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Facilitates reusability and consistency in design.&lt;br&gt;&lt;br&gt;18. **Event-Driven Architecture:**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Components communicate by emitting and subscribing to events.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Promotes loose coupling and scalability.&lt;br&gt;&lt;br&gt;19. **Atomic Design:**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Breaks down UI elements into atoms, molecules, organisms, templates, and pages.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - Helps create consistent and scalable design systems.&lt;br&gt;&lt;br&gt;20. **BEM (Block-Element-Modifier):**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; - A naming convention for CSS classes that enhances maintainability and readability.&lt;br&gt;&lt;br&gt;These are just some of the frontend architectures and design patterns you might encounter. Depending on your project&#39;s requirements and constraints, you can choose the architecture that best suits your needs." style="whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="100" y="1160" width="460" height="1370" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-2" value="&lt;div&gt;1. Monolithic- All application logic in single package and different team is working on same packages&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Its simple &lt;br&gt;&lt;/div&gt;&lt;div&gt;- Its helps application to be delivered faster but as it grows , it was not scalable&lt;/div&gt;&lt;div&gt;- Any change in one service will create issue at any other modules&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="610" y="1200" width="380" height="180" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-3" value="&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.) Micro Frontend&lt;/div&gt;&lt;div&gt;- Modularizing a huge application into small chunks&lt;/div&gt;&lt;div&gt;- Technology agnostic&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;&lt;div&gt;Ways to do.&lt;/div&gt;&lt;div&gt;1.) Iframe&lt;/div&gt;&lt;div&gt;2.) Cutom Element&lt;/div&gt;&lt;div&gt;3.) Module fed&lt;/div&gt;&lt;div&gt;4.) NPM library&lt;/div&gt;&lt;div&gt;https://martinfowler.com/articles/micro-frontends.html&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="610" y="1410" width="380" height="180" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-6" value="&lt;div&gt;Destructuring Applications&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="720" y="1140" width="180" height="50" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-7" value="Types of Web Apps" style="html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="1160" y="1130" width="110" height="50" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-8" value="&lt;div&gt;SPAs.&lt;/div&gt;&lt;div&gt;1.) Single Page Application.&lt;/div&gt;&lt;div&gt;1.) Single HTML file&lt;/div&gt;&lt;div&gt;2.) With the help of JS/ library pages/widgets changes&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3.) No page load once loaded&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;4.) Tradeoff with SEOs&lt;/div&gt;&lt;div&gt;5.)&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;FCP , LCP, CLS &lt;br&gt;&lt;/div&gt;&lt;div&gt;(web vitals will be impacted)&lt;/div&gt;&lt;div&gt;6.) XSS will be impacted&lt;br&gt;&lt;br&gt;https://huspi.com/blog-open/definitive-guide-to-spa-why-do-we-need-single-page-applications/&lt;br&gt;&lt;/div&gt;" style="html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="1080" y="1200" width="270" height="210" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-10" value="&lt;div&gt;MPA&lt;/div&gt;&lt;div&gt;1.) each time browser make request to server for file&lt;/div&gt;&lt;div&gt;2.) Initiall Faster load time since browser does not have to load whole application&lt;/div&gt;&lt;div&gt;3.) Improves SEO&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;4.) But if you compare load time MPA takes more time as SPA&lt;/div&gt;&lt;div&gt;6.) Needs to maintain backend + web on a server&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="1060" y="1440" width="270" height="210" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-11" value="&lt;div&gt;PWA&lt;/div&gt;&lt;div&gt;1.) Designed to give feels like native app&lt;/div&gt;&lt;div&gt;2.) Works Offline because of service woker&lt;/div&gt;&lt;div&gt;3.) Low Data Consumption&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="1390" y="1280" width="270" height="210" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-12" value="https://www.linkedin.com/pulse/mpa-spa-pwa-whats-difference-how-does-work-together-marek-kubacak/" style="html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="1450" y="1140" width="190" height="50" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-13" value="Type of Rendering...." style="html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="690" y="1720" width="410" height="30" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-14" value="CSR" style="html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="610" y="1790" width="360" height="190" as="geometry" />
        </mxCell>
        <mxCell id="X4KiyQoHenp1-eZTwMw4-15" value="ssr" style="html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="1035" y="1790" width="360" height="190" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
